package com.example.MyJavaPostgreSQLApp.Controller;

import com.example.MyJavaPostgreSQLApp.Entities.User;
import com.example.MyJavaPostgreSQLApp.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping(path = "/user")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    // them user
    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        userRepository.save(user);
        return "Saved";
    }

    // tra ve danh sach user
    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    // Delete a user
    @DeleteMapping(path = "/delete/{id}")
    public ResponseEntity<String> deleteUser(@PathVariable Integer id) {
        if (!userRepository.existsById(id)) {
            return ResponseEntity.badRequest().body("Error: User not found!");
        }

        userRepository.deleteById(id);
        return ResponseEntity.ok("User deleted successfully");
    }

    @PutMapping(path = "/update/{id}")
    public ResponseEntity<String> updateUser(@PathVariable Integer id, @RequestBody User user) {
        Optional<User> optionalUser = userRepository.findById(id);
        if (optionalUser.isEmpty()) {
            return ResponseEntity.badRequest().body("Error: User not found!");
        }

        User newUser = optionalUser.get();

        if (user.getName() != null) newUser.setName(user.getName());
        if (user.getPassword() != null) newUser.setPassword(user.getPassword());
        if (user.getRole() != null) newUser.setRole(user.getRole());
        if (user.getImage() != null) newUser.setImage(user.getImage());

        userRepository.save(newUser);

        return ResponseEntity.ok("User updated successfully!");
    }
}
